import platform
import os
# Fortran 90 platform definitions.
print('platform called')
print(platform.python_version())

f90 = {
    # Compiler name.
    'compiler': 'gfortran',

    # Default flags.
    'baseflags': [ '-x', 'f95-cpp-input', '-ffree-line-length-none', '-msse2avx', '-m64',
#'-fopt-info-all',
                  '-fno-automatic', '-fimplicit-none', '-fdefault-real-8',
                  '-msse', '-Wall', ],

    # Debug flags.
    #'debug': ['-g', '-ffpe-trap=invalid,overflow', '-DINTEL_PROFILE'],
    'debug': ['-g', '-O3', '-funroll-loops', '-DINTEL_PROFILE', '-mtune=native' ],
    'debug_link': ['-g', '-O3',  '-mtune=native'],

    # Optimisation flags.
    'ship': ['-O3', '-funroll-loops', '-mtune=native'],

    # Profiling flags ("profile" build type).
    'profile':      ['-O3', '-pg'],
    'profile_link': ['-pg'],

    # Bounds checking flags ("bounds" build type).
    'bounds': ['-fbounds-check'],

    # Test coverage analysis.
    'coverage': ['-O0', '--coverage'],
    'coverage_link': ['--coverage'],

    # Miscellaneous flags.
    'include': '-I',         # Include files.
    'module_dir': '-J',      # Module file output directory.
    'define': '-D',          # Preprocessor definitions.

    # the following 3 lines are for vtune instrumentation
    'libpath': '/cm/shared/apps/intel-cluster-studio/vtune_amplifier_xe_2015/lib64/',
    'libs': ['dl', 'pthread'],
    'debug_link': [ '/panfs/panasas01/geog/td14281/cgenie/src/profile_api/api_fortran_itt.o'],

    # required for blue crystal
    'ld_library_path':'/cm/shared/languages/GCC-5.3/lib'
    # later gets set into the environment
# env['ENV']['LD_LIBRARY_PATH'] = os.environ['LD_LIBRARY_PATH']
# env['ENV']['LD_LIBRARY_PATH'] = '/cm/shared/languages/GCC-5.3/lib'

}
try:
    f90['libs'].append(File('/panfs/panasas01/geog/td14281/make_local/lapack-3.6.0/liblapack.a'))
    f90['libs'].append(File('/panfs/panasas01/geog/td14281/make_local/lapack-3.6.0/libtmglib.a'))
    f90['libs'].append(File('/panfs/panasas01/geog/td14281/make_local/lapack-3.6.0/librefblas.a'))

    # only required in profile mode
    f90['libs'].append(File('/cm/shared/apps/intel-cluster-studio/vtune_amplifier_xe_2015/lib64/libittnotify.a'))
except NameError:
    #this happens when called by go.py, when not needed anyway.
    #Succeeds in scons presumably File is defined when scons makes the call
    print('Add libittnotify.a fail (not important when called by go.py)')


# Platform runtime environment variables.

runtime_env = { 'GFORTRAN_UNBUFFERED_PRECONNECTED': '1' }


# NetCDF platform definitions.

poss_netcdf = ['/usr', '/usr/local', '/opt' , '/panfs/panasas01/geog/td14281/local_gcc5.3' ]
netcdf_base = None
for poss in poss_netcdf:
    if (os.path.exists(os.path.join(poss, 'include', 'netcdf.mod')) and
        glob.glob(os.path.join(poss, 'lib', 'libnetcdf.*'))):
        netcdf_base = poss
        break
if not netcdf_base:
    for poss in poss_netcdf:
        for cand in glob.iglob(os.path.join(poss, 'netcdf*')):
            if (os.path.exists(os.path.join(cand, 'include')) and
                os.path.exists(os.path.join(cand, 'lib'))):
                netcdf_base = cand
                break
        if netcdf_base: break

if not netcdf_base:
    sys.exit('Could not find a valid NetCDF installation')

if (glob.glob(os.path.join(netcdf_base, 'lib', 'libnetcdff*')) and
    glob.glob(os.path.join(netcdf_base, 'lib', 'libnetcdf*'))):
    netcdf_libs = ['netcdf', 'netcdff']
else:
    netcdf_libs = ['netcdf']

netcdf = {
    # NetCDF base directory.
    'base': netcdf_base,

    # NetCDF libraries (either a single 'netcdf', or 'netcdf' and
    # 'netcdff' if the F90 library is split).
    'libs': netcdf_libs
}
